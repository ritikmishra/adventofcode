use regex::Regex;

const MATH_EQUATIONS: &str = "5 + 9 + 3 + ((2 + 8 + 2) + 8 + 9 * (4 * 2 * 5) + 6) * 4
7 + ((9 * 5 + 9 + 2 * 7 * 6) + 3 + (3 + 2 * 8 + 6) * 6 + 4 * 8) + 5
9 + (6 * (4 * 8 + 2 * 4 + 8 + 6) * 4 * 5 * (7 * 8 * 9 + 3 * 4) + 8) + ((2 + 7 * 5 + 8) * 5 * (3 + 8) + 5 + 8 * (7 + 8)) + (2 + 2 + 5 + 7 + 7)
6 + (5 * 7 * (6 * 4 * 5 * 3 + 2) + 3) * 3 + 6
9 + 3 + 7 + (5 * (7 * 8 + 3 * 8) * 2)
2 + 4 + (3 * (8 + 2 + 9) + 5 * 6 * 3 * (6 + 9 + 5 * 9 * 9 + 4)) + 8
6 * 3 + 8 + 3 * (9 * 2 + 5 + 4) + 2
2 * (9 + 9 + 5) * 8 + 5 + 6 + 3
3 + (2 + 3 * 3 * 3) + 2 * 3
(7 + 3 + 5 * 9 * 5 * 5) * 5
3 + 7 * 9 * 7
((9 + 5 + 2) * 7 * (2 + 7 * 8 * 7 * 8 + 3)) * 2 * (2 + 3)
2 + 7 * (2 * (5 + 8 + 5 * 7 * 2 * 7) + 2 + 6) * 6 + 2 * 6
(8 * (6 * 3 + 7 + 8 * 4 * 5)) * (9 + 8 * 8 + (9 + 2) + 6) * 7 + 5
3 + 9 + 9 * 5 + 4
7 * ((4 + 9 + 6 + 9 + 5 + 7) * 8 * 7 + 3 + 7 + 6) * 5 * 3 + 8
(2 * (8 + 5 + 5 + 7) + (2 + 9 + 8) * 8 * 8 * (4 * 8 * 7)) * ((6 + 2 + 7 * 2) * (4 * 2 + 9) + (4 + 3 + 8 + 8) + 4 + (2 * 4 * 9 * 9 + 4 + 6)) + 4 * (6 + 3 + (6 + 5 * 6 + 9)) + 9 + 7
4 * 3 + 6
8 * 8
4 + 6 * 6 + 7 * (4 * 2 * 4) * 5
7 * 6 * 8 * 3 * 9
8 + 2 + 4 + ((4 + 9) * 8 + 4 * 4 * 4 * 2)
5 * (5 + 3 + (6 * 6) * (9 * 8 * 4 * 6) + 5 * 8) * (4 + 9 + 2 * (3 + 4) * 2)
(4 + (8 + 4 + 3 + 4 * 7 + 2) * 4 * 8 + 9) * 5 + 4
8 * 6 + (3 + 7 * (7 * 3 + 5 * 4 + 6 * 9)) + 6 * 8
8 * (9 * 4 + (5 + 4 + 3 + 3 + 4)) * (4 * 9)
6 + ((7 + 3 * 4) + (7 + 6)) * ((6 + 6 + 7) + 7 * 9 * (8 + 4 + 7 * 3))
3 * (3 + (3 + 2 * 3 * 5 + 3) * (9 + 8 + 3 * 3 + 8 + 7) + 9) + 3 + 8 * 4 + 4
2 * (5 * 2 + 2 + 8 + (3 * 9 * 5 + 9 * 4) + (2 + 6 * 3 + 8 * 5)) + 3 * 5
4 + 8 * (6 * 6) + 7 * 4 + 2
(3 * 8 * (3 + 2 * 3 + 5 + 5) * 4 * (4 * 2 + 5 * 6 + 2 + 6) + (7 * 7 + 7 * 4)) + 3 * 6 * 8
3 * 8 + 3 * ((5 + 5 * 5 * 8 * 2) * 2 * (9 * 8 * 8) * (6 * 5 * 8 * 3 + 6 + 8) + 6 + 6)
((9 + 7 * 2 * 7 * 2 * 9) * 2 * 8 * 5 + (7 + 4 + 9)) + 8 + 5 * 3 + 3
(2 + 5 + 9 * 7 * 4) + (4 * 3 + 8 * 2)
5 * (8 * 3 * 6 + 8 + (7 + 9 + 4 * 7) * 2) + 5 * 9 * 7
4 + 5 + (9 * 9 + (4 * 6 * 6) + (4 + 5 + 8 + 9 * 2 * 6) * 2 + 4) + ((5 + 6) + (4 * 7 * 5 * 9 * 5 * 6) * 6 * 2 + 4 + (9 * 7 * 5 + 7)) * (7 * (6 + 3 * 5 + 4))
(4 + 8 * 7 + 5 + 7) * 4 * 7 * 8 * 8 + 6
6 * 2 * (5 * 7 + 9 * 7 + 5 + 3)
9 * 5 * 7 + 8 + (5 + 2 * 7 * 8 + 2) + 5
6 + 3 + 2 * 4 + (8 * 9 + 4 + (9 + 5 + 2 * 3)) + 4
(8 + 9 + (6 * 4 * 9 + 6) * 9 + 3) * 6 + (7 + 7 * 6 * 8 + 4) + 4
(9 + (7 * 9 * 6 * 3 + 9 * 7) * 8 * (9 + 4 + 8 + 9) + (6 * 8 * 7 + 6 + 2) * 5) * 8
7 + (9 * 6 * 3 + 8) + 5
9 * 2 + (2 * 9 * (3 * 5)) * (9 + 5 * 7 + (2 * 2 + 7 * 5 * 2 * 2) * 9)
(4 + (5 * 2 * 3)) + 8 * 8 * 6 * 6
(4 + 7 + 6 + 6 * (9 * 5 + 9 * 6 * 7)) * (4 * 3 * 5) * 9 * 3 * 7 + 4
(6 * 6 + 5) + 5 * (7 + 7 * 5 + 4)
(6 + 7) * 4 + 3
4 + 5 * 6 * (8 + (5 * 2) + 8 * 4 + (4 * 6 * 3 * 2) * 8)
8 * (8 + 4 * (2 * 5 + 9 * 8 * 6 * 9) * 3 + 2 * 5)
(4 * 3 * 6 * 7) * 4 + 4
((8 + 8 * 5 + 2 * 5 * 9) + 3 * (3 + 7 * 6 + 5 + 2)) * 3 * 7 + 4 + 6 * 6
4 * (7 + 6 + 7 * (4 + 9 + 8 + 9))
2 + 9 * 5 + (7 + 6 + 5 * 9) * 9
(3 * 3 * 4) * (2 + 3) + 2 * 7
7 * 6 + (2 + 5) + 4 * 3
8 + (2 * 3) * 7 + 4 * 3 + 6
4 * (6 + (6 + 7 * 8 + 7))
6 * (7 + 5 * (2 + 9 * 8 * 8 + 2 * 3) * (3 + 2 + 9) + 5 + 5)
7 + 6 + (7 * 2 * 9 * 9 + 5) * (6 * 9 + 2 * 2 + 2 * 3) * 5 + 2
5 + 4 + 8 * (2 + 2 + 7 + (7 + 6 + 9 + 5 * 7 + 3) * 7 + (2 * 6 * 6))
3 * (4 + (2 * 6 + 3) + 2 * 2 * 5) + (7 + 2)
(3 * (9 + 3 + 7) * 5 * 8) * 2 * ((6 + 7 + 2 * 7 * 9) + 4 * 5 + 9 * 7) + (6 * 2 * 4 * 8 + (5 * 4 + 4 * 3 * 2) + 5) + 2 + 5
(7 + 6 * 8 + 3 + (7 * 2)) * 5 + 5 * 6 + 8
(6 + 3) + (9 * 7 + 3) + (8 * 4) + 9 * 9 * (3 * 3 + (5 * 3 + 9 * 7 * 3))
5 * 2 * 5 + 2 + 5 * 6
((2 + 9 * 8 + 2 * 2 * 4) + 5 + 6 + 4 + (6 + 3 + 2 + 6 * 2)) + 4 + 8 + 6
8 + (8 * 5 * 6) + 5 + 6 + 5
8 * 3 + 7 * 6 + 5 * ((6 * 9 + 5) + 7 + 5 * 2)
(7 + 2 + 5 * (4 + 9 + 5 * 3 * 3) + 2 * (9 + 5 * 3 * 7 + 5 * 5)) * 5 * 3 + 3 * 7
8 + (3 * (4 + 9 * 2 * 4 * 6) + 8 + 5) + 9 + ((2 + 4 * 6 * 4) * 3) + 3
(6 * 9 * 3) + 8
4 + ((6 * 2 + 7) * 4 * 2 + (5 + 9 * 8 + 9) * 9) * 9 * 8 + (6 + 5 + 7 * 7 + (3 * 9 * 3 + 2) * (5 * 2 * 2 * 8 + 2))
4 + ((2 + 7 + 6 + 5) * 8 * 9 * 7 + 5 + 3) * 8 * 2
7 * 2 * 6 + 2 * ((5 * 7) * 6 * (9 + 6 + 7) * 4 + (9 + 7) + 9) * (6 * 3 + 3 + 2 * 8)
5 + 7 + 8 * 2 + (6 * 3 * 7 + 6 * 2)
9 * 7 * 6 * 8 + (4 * 2 * 5 + 4 + 9 + 3)
4 * 5 + (8 + 5 * 4 + 3 * 8) * 3 + 4 * 2
6 + 9 + (2 * (5 + 2 * 9 + 4) * (2 * 9)) + (7 * 5 + 7 * 4 + (8 * 3 * 7 + 4 + 3) + 9)
((6 * 6 * 2 * 6) * (6 + 5) + 7) + 6 + 8
3 + 9 + (5 * 7 + 9 + 5) * 2 * 5 + 2
4 + 6 * 7 + 4 * 9 + ((9 * 2 + 5 + 3 + 8 * 2) * (9 + 3 + 3 * 2 * 2) * 9 * 2 + 7)
8 + 6
6 + 6 * 5 * (7 + 6 + 4) + 2
9 + 7 + (4 + 5 * 2 * 3) * (6 + 3 + 8 + 6 * (2 + 9 * 2 * 9 * 7 * 5)) * (8 * 7 * 7 + 4 + (7 * 5 + 2) + (7 * 8)) + 7
6 * 9 + 3 + 6 + 9
5 * (6 + 7 + 8 + (3 + 7 + 4 * 7) * (2 * 5)) + 2
(8 * 8 * 5) * ((6 + 7 * 6 * 6) + 4 * 8 + 4 + 9) * (9 * 9 + 4 * 2 * 3) * 8
9 * 9 + 7 * 6 + (9 + 7 + 9 * 9)
2 + 9 + (5 * 6 * 7 * 8 * 6 * 2) * 2 * 8 * (3 * 6)
(3 + 2 * 9 * 8) * 2 + 6 + 9 + (3 * 8 * 6)
(4 * 4) + 5
4 + 6 * 2 + 7 * 3 * 7
6 + (5 * (5 + 3 + 6) + 6 + 9) * 2 + 8 + 9
((4 * 9 + 7 + 9 * 8 * 2) * 4 + (9 * 3 + 8) + 8) * 2
8 + 2 + 7 * (8 * 9) + (2 * 9) + 4
(3 * 9 + 7 + 3) * (9 * (8 * 3 + 8 + 7 + 7 * 6)) + 7
9 * 2 + (3 * (7 + 9 * 5) + 6) * 4 * (7 + 6 + 4) + ((9 * 2 + 9 * 3 + 4 * 3) + 5 * (7 * 2 + 9 + 3 * 9) * (6 * 2 + 4 + 6) * 7)
9 * 3 * (7 + 8 * 8) + 9 + 7 * 9
(8 + 4 * (2 * 2)) * ((7 + 8 + 8 * 5 + 6) * 2 + 5 * 4)
(2 + 2 + 6 * 5 * 2 + 4) * 9 * 7 * 2 + (6 * 8 * 5 + 6 + 3)
4 * ((5 + 8 + 4 * 3 + 6) + 9 * (5 * 2 + 9)) * 9 + 8
9 * 5 + 9 + ((7 * 3) * (7 * 4 * 3 * 2) * (9 * 9 * 5) * 2) + 8 * (5 + 4 + 9 + 6)
2 + 6 + (7 * 8 + 3) + 3
(7 + 4 + 7) * 3 * 7
((8 * 8) * 7 + 2 + 5 * (6 * 4 + 4) + (3 + 4 * 8)) * 4 * 8
9 * ((5 * 2 * 5 + 8 * 7) * 2 + 7)
2 + 8 + 8 + 3 * 5
7 + 6 * (6 * 5 + (2 + 6) * 2 * (5 * 6))
5 * (2 + 2 + 2 * 9)
9 + 6 * 4 + (6 * 6 + 4 * 9 * 8 + 8) * 5 + 6
4 * 3
8 * 3 + 7 * 2 + (2 * 3 + 3 * 7 * (4 + 7 * 9 * 7 * 2 * 3))
(9 * (8 * 9)) + 4 + 8 + 5 + ((2 + 5) + (6 + 2 + 2 + 2 * 8) * 6 + 5)
9 + 8 + ((5 * 7) + 9 * 3 + 8) * 7
(3 * 5 * (2 + 4 + 3 * 7)) + 8 * 7
(9 * 5 * 9 + 5 * (7 + 4 * 8)) * 7 + 3
((6 * 9 + 5 + 8) + 6 * 5 + 9) * 2 * 9 + (8 + (8 * 2 * 2) * 4 + (4 * 5) + 3) * (4 * 4 + 6 + 5 + 6)
4 + (3 * (6 + 8 * 6 * 8 * 9) * (2 * 7 + 9 * 4 * 2)) * 2 + 7 + (6 + 9 + 6) * 2
2 + 5 + 9 * 5
4 + (9 * 2) + 5 + 3 * 6 * (9 * 3 * 2 * 9 * 7)
(8 + (2 + 8 + 5 * 7 + 6 + 5) * 4 + 9) * 4 + 6
3 + (9 + (8 + 2 * 2 + 9 + 7 + 7)) + 9
(7 + 6 * 8 + 6 + (7 + 7 * 8)) + 2
(7 * 7 + 6 * 9 * 8) + 6 + 3 + 6
(4 * 5 * 8 * 6 + 5 * 9) * (2 + (8 + 5 * 9 * 2) + 6 * 8 * 2 * 5) * 5 * 5 + 4
4 + (6 + 5 * (9 * 5 * 8 + 4 * 7 + 7) * 6) + 9 * 4 * 7 * 2
((8 + 2 + 8 * 4 * 6) * 2 + 3) + 6 + 8
(3 * 8 * 2 * (3 + 7 * 9) * 2 * 4) * (3 + 6 + (8 * 2 + 8 + 2) * (8 + 2) + 9) * (3 * 5 * 3 + 2) + 3 * 7
7 + 2 + 3 + (9 * 7)
(2 * 6 + 4 * 3 + 2) * 5 + 3 * 8 * 7 * (8 + 3 + 3 + 9)
7 * (9 * 2 + 8 + 2 * 9) + (7 * 7 + (2 * 2 + 2 * 4 * 9 + 9) + 6 + 5) * 2 * (3 + (4 + 8 * 7 * 7) + 5 * 2) * 9
6 + 5 * 7 * 6 + (2 * (6 + 6 + 2 + 9 * 5 * 3) * 5) + 2
(3 + 6 + 8 * 3) + 7 * 5 + 9 + 3
(3 + 6 + 4 * 6) * 5
4 * 7 * (9 * 9 + 7 + 2 * (4 * 4 + 4 + 9 * 8) + 5) + 8 * 7 * 7
6 + ((6 + 2) + 4 * (7 * 5 * 2) * 5 * 6)
3 + (3 * 9 + (2 + 3 + 8 * 8 * 8) + 4 * 3 + 7) * 8
(3 + 5 + 8 + 6) * 5 + ((4 * 4 * 8 + 7 * 7 + 6) * 2 * (4 * 3 + 7) * (8 + 5 * 8 + 8 + 4) + (6 + 3 + 2 + 2)) * 6 + 2 + 5
8 + ((8 + 7 * 9 + 9) + 6 * 8)
3 * (4 + (2 + 4 * 7) + 5) + 5
6 + 8 * (6 + 2 * 9) + 4 + 4
6 + (9 * 2 * (2 * 7 + 7 * 6 * 7 * 4)) + 4
4 + 4 + (5 * 8 * 4 * (4 + 4 + 6 + 4 * 3) + (6 + 7) * 6) * 8 * (5 + 7 + 4 * 7 + 9 * 4)
8 + ((8 + 5 + 6 + 2 * 6) * 4 * (3 * 5 * 5) + 9 * 8 * 8) * 8 + 2 * 5 + 6
4 + 4 * (8 * 5 + 5 * 2 * 5 * 2) + 2 + 3 * 7
6 + 4 + (9 + 4 * 3 * 2 + 7) * 5 + 5
8 * ((3 + 5) * 7 * (5 + 3 * 6 * 4) + 5) * (2 * 6 * (5 + 6) * 9) * (5 * 7 + 3 + (5 * 9 * 8)) * 6 + 7
9 + 2 * 7 * 6 * (2 + 6 * (6 * 5 + 5 + 3 + 8) * 8 + 5 * 9)
((8 + 4) * (3 * 7 + 8 * 5 + 4) + 7 * 9 * (6 + 3 * 5 * 3) * 2) * 7 + (4 * 9) * 4 + 4 + 3
9 * (9 + 2 * 5 + 4 + 8 + 7) + 2 + 9 * 3
(9 * 9 + 4 * (2 + 6 + 9) * 2) + 8 * (3 + 6 + 6) * 8 * 9 * (6 * (2 * 7 + 3) * 6)
5 * (3 * 2 * 6 + 9) * 2 * 5 + 3
((9 + 6) * 3 + 3) * 5 * 5 + 2 + ((8 + 7 + 3) + (7 + 5) * 4 * 3 * (6 + 6 + 4 + 4))
4 + (3 + 6 + 6 * 5 * 4 * 2) * (5 + 2 * 3) * (8 * 6 * 5 * 3) + 5
(7 + (3 + 3 + 9 * 4 * 9)) + 5 * 3 * 7 * 3
4 + (9 + (5 * 6 + 2) + 3 + 7) + 3 + 9 + ((5 * 8 * 6) + 8) + (6 + 4 + 8 * 4 * (9 + 2 * 4 * 5 * 6))
5 * 4 + 9 * (3 * 2 * (8 + 5 + 6 * 2 * 4) * 4) * 9
7 + 4 * 5 + (3 * 2 + 4 + 2)
2 + (6 * 8 + 3 * (4 * 8 + 4 * 2 * 3 + 6)) + 8 + 6 * 8 + (4 + 8 * 9 + 5 * 6 + 8)
2 * 2 * (3 + 7 * 8 * 2 + 8 + (8 * 6 + 5 * 8 + 5)) + 7 * 3
(5 * 5 * 3 + 8 + (6 + 9 + 2)) + 7 + 5 * 6
(4 * 5 + (6 + 4 + 6 + 4) + 5 + 7) * 5
7 + (6 * 5 * 8 + 9 * 8 * (5 * 4 * 8 + 3 + 9))
3 * (5 * 2) + 4 * 8
((5 * 8 + 6 * 4 * 4 + 7) * 4 * 6) + (9 * (4 * 2 * 6 + 7 + 7 + 6) * 6) * 2 * 5 * 2
(3 + 7) + 5 * (7 * 4 + 6 + 4 + 7 * (4 * 3 * 6 * 9 * 2)) * 5 * 6
((6 + 9) * 7) * 6 + (5 * 3 * 3 * 7 * 2 * 8) + 2
6 + (7 + 5 * 3 * (4 + 8 * 9 * 9 + 7)) + 9 * 5 + (5 * 3 * 2 * 7 * (6 + 6 + 6 * 7))
(6 + 2 + 4 * 5 * (3 * 9) + 7) + ((4 + 2 + 7) * 9) * 4 * 7 + 6 * 9
9 + 6 * (2 * 6 * (2 + 5 * 4 * 6) + 3)
(6 + (9 + 4 * 6) + 6) + 7
6 + 5 * 7
(8 * 8 * 7 * 4 * 2) + 6 * 3 + (9 + 9 + 7 + (9 + 2 * 2 * 6 * 7) + 3) * 7
4 + 4 + (3 + 9 * (2 * 7 * 7 * 3) * 6) + 4 * 4
(2 * 2 * 6) + 8 + (5 + 4) * 4 * 5
6 * 3 + 3 * 7
3 * 7 + (2 + (3 + 6 * 5 * 4 + 5 * 2) * 6 * 5 * 9) + ((8 + 2 * 2 * 5 + 2) + (2 + 4) + 7 * 7 + (3 * 3 * 5 + 5 * 4 + 3) * 7) * 6
8 + 7 + 4 * ((8 * 7 + 4) + 4) + (4 + 2 * 3) * 2
2 + 3 * 2 * (8 + (6 + 3 + 2 * 2 * 5 * 5) * 9) * 6 * 5
2 * 5 + 5 * (8 + (8 * 7) + 2 + (8 + 2 * 3)) + 6
(8 + (2 + 4 + 5) + 2 * 3) * 5
7 + 7 * (6 + 9 + (6 + 5) * 3 * 5)
2 + (5 * (9 * 5 + 4 + 3 + 8 * 9) + 9)
2 + 7 + ((2 * 8) + 4) + 7
7 * 9 * (2 * 7 + 9 + 6)
(4 + 5 + (8 + 4)) + 4 * 2 * 8 + 7 * 5
3 + 5 + 2 + 8 + 7 + 2
(2 * 6 + 8) + (2 + 3 * 6 * 5) + 3 * 4
9 * (2 + 8 + 2 * (2 * 7 + 9 + 8 * 6 + 8) * 3 * (8 + 5 + 8 + 6 + 9 + 9)) * 2 + 4
(2 + (4 * 9 * 7) * (6 + 4) * (9 * 2 * 4 + 5) + 5) + 8 * 6 + 4
(7 + (4 * 5 + 4 * 2 + 7 + 6) + 5) + 9 + 7
2 + 5 * (7 + (9 + 8) * 7)
3 * ((9 * 6) * 6 * 5 * 5 * (6 + 6 + 9 * 4 + 7 * 6)) + 6 + 2 + 2 * 9
(6 * 6 * 8 * 5 + 8) + 4 * (9 + 6) * 5 * ((9 + 7) + (3 * 6 * 8 + 5 * 4 + 7) + 9 + 5) + (2 + 6 + 9 * 2 + 8)
8 + 2 + 2 * 6 + 8
((2 + 8 + 6 * 2 + 9 + 8) + 8 * 7 + 4 * 4 + 2) + 9 + (4 * 3 + 2 + (3 * 2 + 8) + 4) + 9
3 * 7 + (5 * (9 + 6 * 5) + 4 + 6 + 8 + 2) * (3 * 7 + 3) + 8
5 * (4 + 6 + (2 * 8 + 9 + 3 + 2 * 2) * (4 + 5 * 2 * 3 * 8 * 3)) + 9
(6 + 9 + 8 * 5) + (8 * (6 + 8 + 8 + 9 + 3 * 2) * 3 + (8 * 4 + 5 + 9 + 5 * 6)) + 3 * (2 * (7 * 6 + 9 + 8 * 9 + 3) + 3 * 4 * 4) + 8 + (3 + 2)
6 + ((8 * 8 + 5 + 3 + 4 * 7) * 2 + (2 * 8 * 7)) * 4 + 7 + 9 * 8
6 * (4 + 4 + 7)
6 * (8 * 4 * 3 * (4 + 5 + 7 + 9 * 3) * 2)
9 + 8 + (5 * 2 + 9) + (8 * (3 * 9) + 3 + (7 + 8 + 4) + 3) + 7 + 5
8 + 4 * 8 * (4 + 8 * (9 * 7 * 6 + 2 + 5)) * (4 * 3)
(7 * 2 * 6 * 2 * 8) + 6
(2 * (7 + 2) + (5 + 8 * 8 + 9 + 6)) * 8 + 3 + 9 * (6 + (7 * 2 * 2 + 4) * 8 * 4 * (3 + 3 * 3 + 8 + 4) * 5) * 8
7 * (3 + 7 + 3 * (2 * 5 + 5) + 6 * 5) * 8 * 2
3 * 9 * 5 * ((4 + 5 + 3) * 6 + 8 + 9 * (6 + 6)) + (6 * 6)
(4 * 8) + (7 * 9 + (3 * 4 + 8 * 7 + 5 + 3) * (7 + 6 + 2 * 7 * 6 * 2)) + ((4 + 7 + 3 + 9) * 5) + 8
4 + (9 * 4 * 3 * 7 * 6) * 3 * 6 * 7 * 4
5 * 9 + ((8 * 8 * 6 + 2 + 4 * 3) * 5 + (7 * 5) * 6 * 5)
6 + 7 * 3 + (6 + 6 + (9 + 7 * 5 + 5)) * 7
5 + ((6 + 9) * 8 * (8 + 3 + 3 * 5 + 9 * 9) * 3 + 5 * 9) + ((6 + 2 + 3) + 6 + 7 + 7) * 6 * 6 * 4
6 + 5 + (9 + 9 + 5 * (2 + 3 * 4 + 2) * 9)
(9 + 4) * 7 * (9 * 7 + 5 * 4 + 4 + 5) + 8
4 * 2 * 4
9 + ((4 * 6 + 9) + (8 * 3 + 6 * 5) + 3 + 4 * 8) * 8 * (2 + 6 * 3 * 2)
9 + 9 * 3 + ((9 * 7 * 6 + 8) + 9 * 4 + 6) * 5
(3 * 2 * 8 + 7 + 7) * 8 * 4
(9 + 2 * 4 * 7) * 8 * (8 * 4 * 4 + 5) + 4 + ((9 * 8 * 5 + 6 + 8) * 5 * (4 * 9 * 8) * 7) * 2
(9 + 6 + 7 * 6 + 9 * 4) + 4 * (4 * (6 * 5 + 8 * 9 + 2) * 4 + (3 * 8 + 8) + 3 + 6) * 6
9 * 9 * (4 + 9 * (2 + 7) * (5 + 3 + 5) + (6 * 4))
(9 + 6 * (2 + 3 + 2) * 8 + 3) * 5 * 6 + 7 + 9 * 2
3 + 4 * (2 + 4 + 6 + 2 * 7 + 4) + 5
7 + ((8 + 3 * 9) + 7 + 7 + 5) * (4 * (6 * 3 * 4 * 4 + 9 * 8) * 7 + 2 + 2) + ((6 + 8 * 5 + 2) + 4 + 2)
(3 * (8 * 2)) + 8 * 5 * (5 + 4 * 4 + 8 * 8 * 8) * 2
7 + 8 * 8 * (7 + 7 * (8 * 7 + 2 + 6 + 6 + 5) + 3 * 2)
9 * 9 * 4 * ((4 * 6 + 7 + 9 * 4 + 2) * 5 + 7 + 3 * 3 + 8) * ((4 + 6) + 4 + (4 * 5 * 7 + 4 + 2) + 2)
3 * 2 * 9 + ((8 * 7 * 6 * 3) * 6 * 9 + 3 + 2 + 8)
(3 * 7 + 6 + 7 * 3 + 7) + (9 + 4) + (8 * 3 * 8 + 5) * 2 + 8
3 + 7 + ((9 * 6 * 9 + 7) + 3 + 2 * 4 * (2 * 2)) + 7
9 + 3 * (5 * 4 + 2 + (9 * 2 * 3 * 6) * 6 * 7) * 7
((5 * 2 + 8 * 5 + 2) + 8) * (5 * 3)
(5 + 8 + 3) * (8 + 7 * 8 + (7 + 9 + 2 * 5 + 3))
(6 * (8 * 6 * 2 * 9) * 8 + 5 + 7 * 6) * 3 + 9 * 2 + 3 * 9
4 * 4 + 7 * 4 * (5 + 8) * 3
2 + 7 + (5 * 9 * 2 * 7 + 4)
6 * ((8 + 7) + (6 + 3 * 2 * 9 + 4) * 2 + 8 + 5 + 5)
5 * (2 + 4 * 8 + 3 + 3 + 5) * 4
9 * 2 + 3 * 9 * (8 + (4 * 8 * 2 * 7 + 3) * (9 + 4 * 9 + 3 * 8 + 7)) + 3
3 + 7 + 7 * 6 * 8 + 3
2 + 6 * (6 * 3 + 3 + (9 * 2 + 2)) * 4
((4 + 4 * 4 + 4) + 2 * 9 * 2) + 4 * 9
((7 * 4 + 5) * 8 + 7 + (4 * 6 + 8 + 5 * 6 * 6) + (5 + 3 * 7)) + (2 * (2 + 6) + 4 + 9 + 4 * 3)
6 * (3 + 5 + 9) * ((4 + 9) + 5) + 3 * 6 + 9
(7 * 2 * (6 * 8 * 9 * 3 * 9)) * 2
5 + (5 * (6 + 7 + 5 * 4)) + 9 + (9 + 9 + 6 + 5 + 4) + 8
((9 * 3 + 8 + 3 + 8 + 5) * 8 + 4 + 3) * 2 * 9 + 2
5 * ((5 + 3 + 9 * 6 + 9) * (3 * 6 * 6 * 2) + 6 * 3 * 9 * 3)
(4 * 4 * 7 * 2 + 2 * 7) * 5 * 5 + 7
3 + (7 * (8 + 6 * 5 * 3)) + 9
5 + ((5 + 6) * (9 * 3)) + 5 * 6 + 8 * 6
2 * 6 * (8 * 8 + 5 * (9 + 6 + 3 * 6 + 9) * 3 + 4) * (4 + 4 * 4 * (8 + 5) + 7 + 6) + 5
((7 + 3 * 6) + 6 + (7 * 8 + 4 + 2 + 2 + 2)) + 7 * (4 + 2 + 2) + ((6 + 2) * 6) * 6 + 9
(6 + 2 + 9 * 7) * 7 * 4 + 8
2 + 2 * ((4 + 4 * 8) * 5) * 3 + 8 * ((9 + 8) + 8 * 6)
(6 * 8 * 6 + 2 + (4 * 6 + 4 * 7 + 7) * 2) * 7 * ((5 + 9 + 5) * 8 * 3)
8 + (3 + 5 * 9 * 6 + 3)
2 * 6 + 8 + (2 + (4 + 8 * 5 * 4) + 9) * (7 * (8 * 9 + 9 + 3)) * 8
(3 + (7 * 4 + 7) + 7) + 9 + 3 * (8 * (6 * 3) + 4) + 9 * 2
(4 + 5 * (2 + 6 + 5) * 4) * 9 + 9 + 3
9 + (4 * 7 * 6 * 9 + 8 + 3) * (6 * 4 + 4)
(3 * (2 * 4) * (3 * 7 + 4 * 4) + 2 + 3) * 3 + 3 * 8
7 * (8 + 5 * (3 * 6) + 5 + (2 + 4 * 6 * 7 * 6))
(5 + 7 + 6 * 6) * 8 + 2 * 4 + (2 + (2 + 3 * 5 * 2 + 5) * 7 + 4 * 4)
(3 + 2 + 2 * 4 + (8 + 6)) + 2 + 9 + 3 + 6 + 7
9 + 2 + (7 + 6)
(7 * (6 * 4 * 9 * 4 + 2 + 9) * 5 + 7 + 9) * 3 + 5 + 3 * 7
((3 + 5 * 5) + 4 + (7 * 7)) + (2 + 8 + 7 + 6 + 5 + (7 + 7 + 6 + 4 + 6)) + 8 + 7 + (5 + (5 * 7 * 9 * 4) * 2 + 7)
(5 * 3 + 4) * 4 + 3 + ((3 * 3 * 3 + 5) * 7) * 8 + 7
7 + (2 + 3 * (8 + 4)) * ((2 + 5) + 6 + 6) + 9 + 7
6 + 6 + 3 + 3
7 + 9 + 6 * ((6 * 7 + 2) + (6 * 4 * 4 + 4) * 9) * 3 * (5 * 2 * 8 * 9)
(6 * (2 + 4 * 9 + 3 + 9 * 4) * 5 + 6 + 8 * 7) * 5 * 5 * (9 * 8)
8 + 2 + (4 + 3 * (8 * 6 + 5 + 8)) + 5 + 2
6 * ((9 * 3 + 8 * 8 + 2 * 5) * 8 + 7) * 7 * 5 + 6
2 + 3 + 5 * 5 + ((3 * 7 * 6 * 8 * 3) + 9 * 9) + 2
7 + 2 * 2 + (5 * (8 + 5 * 2) * (3 * 9 + 7 * 7 * 2) * 7 + 8 * 2) + 4
5 * 6 * (7 + 2 * 8)
9 * 4 + ((2 + 3 + 2 + 2 * 8) + 7) * (2 * 9 + 2 + 6)
((5 + 5 + 8) + 8 + 8 + 9 * 7 * 8) * (8 + 5 + 9 + 4) + 5 + 7 + 8 * 3
(3 * 6 + (3 * 8 + 5 + 4 + 6) + (6 * 4 + 6 * 8 * 4) + 7) * (5 * (3 * 7 + 5 + 5 + 2)) * 5 * 6
5 + 6 * 5 * 8 + 2 * (7 + 2 * 9)
4 * 4 + 4 + 3 + 2 + 3
((2 * 4) + 5 * 6 + 2 + 3 + 2) + 4 * 8
5 + (5 + (6 * 3 + 3 * 6) + 7 + 9 * 9) * 9 * 7 + 4
9 + ((8 * 7) + 3 * 5) * 7
4 + (9 + 3 * 7) * 8 * 3
6 + (8 + 9 * 5 + 2) * 3 + (3 * 7)
(8 * 6 * 9) + 9 * 7 * 6 + 2 * (4 + 4 + (2 * 3 + 3 * 4 * 8) + (8 * 5))
(3 + 7) + 8 * 7 * (9 + (8 + 5 + 9) + 3) * 4 * 4
((8 * 5 + 5 + 5 * 3 + 5) + 7 * (3 + 2 * 2 * 3 + 7 * 3) * 2) * 5 + 3 + 3
8 + 3 * 6 + (9 * 7 + 4 * (3 + 3 + 9)) + 3
8 * (8 + 4 + 5 + (9 * 3)) * 5 + 7 + 3 + 7
4 * ((4 * 5 * 4) + 4) * 8 * (2 + 2 + 4 + 7 + 2 + 2)
9 * (6 * 9 + 2 + (7 + 7 + 5 + 4) + 2 + 2) + 5 * ((4 * 3) + (2 * 2) * 6) + 9
8 + (9 * (8 + 6 * 7 * 7 + 3) + 7 * 2 + 5) * 4
5 + (8 + (5 * 3 + 6 + 6 * 3)) * 6 + 4 + ((5 * 3 * 2) + 6 * (4 * 3 + 6) + (4 + 5 * 8) + 9 + 2) * 9
4 * (3 + (9 * 5 * 2 + 2) * 6 + 6 * 4 + 7) * 3 + 3 * (2 * 8 * 5 * 3 + (6 * 7 * 4 + 4))
4 + 6
(2 + 3 + 9) + (9 * 4) * 7 + (2 * 6 * 8 + 3 * (6 + 7)) + 7 + 5
4 + ((9 * 5 + 9) * 6) + 5 * 8 + 6 * 5
2 + (8 * 6 + (6 + 5 * 8) + 3 + 7 + 9) + 6 * (4 * 2 * 5)
(4 * 3 + 5 * 2 + (4 * 4 * 4 + 3 * 2) + (4 + 3 + 9 * 5 + 5)) + 5 * 3 + 2 * (9 * 2 * 5 + 6)
6 * 6 + (3 + (8 * 4 + 8 + 7))
4 + (5 + 4 + 8 * 8) + 6 + 2 + 7 * 5
5 + (6 * 2) * 7 + 5 * 5
2 + 3 + (5 * 4) * 4 + 8 * (5 * 8 * 9 + 8 + 4)
(5 * 3 * 4 * 9 * 3 + 6) + 5 * (9 * 4 + 4)
8 * 7
4 * 2 + 6 + 9 + 6 * (2 * (7 * 9 * 7 + 3 * 9 * 8) * 4 * 4 + 6 + 3)
(3 + 5 * 2) * (8 + 2 + 2 * 7 + 2 * 6) + 9
2 * (4 + 2 + 5 + (4 + 3 * 6 * 7 * 7) + (9 + 7 + 5 + 6)) + (3 * 9)
(3 * 7 + 5 * 7) * ((4 + 2 + 9 + 3 + 3 * 3) + 6 * 7 + (4 * 3 + 8)) + 7 * 9
9 + 9 + 6
((9 + 4 * 4 * 4) * 6 + 2 * 9 * 4 * 9) * 3 + 3 * 8 + 4
7 * 7 + 8 * 3 + 5 * (3 * 7)
((5 * 9) * 3 + 8 * 6 * 4 + 3) + (6 + 7 * 4 + 8) + 8
7 * (5 * 4 * 3 * (2 * 5 * 2) + 6)
9 + 5 * (7 + 8 * 4) * 3 + 2 + (2 + 3 + (8 + 4 + 4 * 5 * 8 + 6) + (4 * 8 + 9 * 4 * 9 * 5))
((9 * 9) + 2 * 8 + 9 + (4 + 9 * 8) + (6 * 3 + 9 * 6)) + (3 * 9 + 8 + 8 * 9) + 5 * 8
((2 * 2 + 5) * (2 + 6 * 5 + 8)) * 5 + 3 * 4
8 + (9 * (7 * 5 * 3 * 2 + 9) + 9) * 6
(6 + (9 * 4 * 7 + 2 + 9) * 7 + 6) + (2 * 4 + 5 + (5 + 8) * 3 + (8 * 9 + 2 * 4 * 4 + 5)) + 2 + 4
3 + 5 * 8
5 + 9 * 4 * 7 + 5 + (9 * 5 * 2 + 8 * 3)
3 * (7 + 6 * (8 + 6) + (9 + 3 * 3)) * 6 + 4 * 3 * 3
(9 * 5 + 2 * 8 + 4) * (8 + (5 * 5 * 6 + 2 + 2)) * 6 * 6 + (5 * 3 + 3) + ((2 * 7 + 7 * 7 + 7 + 3) * 4 + 5 * 3 * 3)
(5 + 5 * 4 + 7 * 8) * (9 * 9 * (4 + 4 * 2 * 5 * 2)) * 8 * 7 + 8 * 9
3 * 5 + 5 * (2 * 3 + 7)
(7 * 5) * 8 * 4 * 5
6 * 3 * 5 * ((4 + 4 * 9 + 2 * 3) * 5) + (7 * 3 * 5 + (8 * 7 + 7 * 6) + 4) * 2
7 + (6 * (5 + 6 * 7)) * 9 * 8 + 3 + 7
6 * 3 * (8 * 8 * 7 * 8 * 2 * 8) * (6 + 5 + (2 + 9 * 6) + 5 * 3) + 6
2 * 9 + 8 + (9 + 9 + 9 * 9 * 3)
((2 + 7) + 2 + 2 * (8 * 2 * 5 * 2)) + 8 + 2 * 3 + 9
8 + 7 + (2 * 5) + 9 * (5 + 4 + 8 + 4) * 3
6 * 9 * 6 + 4 + (5 * 4 * 7 * 9 * (8 + 9 * 3 + 8 + 4) * 6) * 4
8 * (3 * 4 * 3) * (2 * 2 * 8 * 5) + 8 * 4
2 * 7 * ((2 + 2 * 6 * 2) + 3 * 8 * (8 + 6 * 4 + 8 + 2) + 7)
7 + (4 * (5 * 8 * 5)) + 7
5 + (6 + 8)
2 * 4 + (3 * 6 + 8 + 2) * (7 + 3 + 6 + 8)
9 * 3 * 4 + 8 + 3 + (7 + 9 + 9 * 8 + 3 + (8 + 5 + 2 + 9))
6 + (3 + 9 + 8 + 6 * 8 * 7) + 6 * 8
8 + 3 + ((2 + 3) * 8 * 5 + 8 * (2 * 9 * 8 + 5 * 2) + 2)
(8 + 3 + (9 + 9 * 4 * 4) + (3 + 8 * 3 * 4 + 2) * 8) + (5 * 4 + 7 * 3 + (3 + 2 + 2)) + 8 * 5
(8 + 8 * 6 * 3 + (5 + 7)) * 2 * (4 + 3 * 5 * 2 * 9)
(7 + 8 * (6 * 5 + 3 + 2 + 3 * 2) * 7 * 7 * 2) + 4 * 3 * ((3 * 3 * 8 + 8 + 5 * 6) + 5)
3 * 5 + (6 + 7 + 7 + 5) + 2
((2 + 8 * 7 * 5) * (8 + 6 * 5 + 7 * 7 + 3) + (2 * 6) + (9 + 5 + 2 * 7)) * 4 * 5 * 7
7 * 2 * 5 * (8 * 6 * 3) * (5 + (7 * 8 * 3))
(8 + 2 * 5 * 9) + 6 * (7 * 8) + 5 * 9
8 + (5 + (9 * 8) * (7 + 7 * 4 + 7) + 5 + 2) + ((4 + 7 * 3) + (6 + 6 * 8 * 5 + 3) * 6 * (9 * 6 * 6) * 8 * 8) * 3
(7 * 7 + 7) * 3 + 4 * 6
(3 * 2 * (3 + 9 * 3 * 9 * 9) * 6 + 3) * 4 * (8 + 9 + 3 + 6 + 4 * 5)
(7 + 7 * 6) + 6 + 9 * (5 * 4 * 5 * 7 * (4 * 2 * 3 + 8) + 3) + (9 + 8) * 8
4 + (8 + 3 * 3) * ((5 * 7) + 9 + 4) * 2 + 8 + 3
(8 * (6 * 8 + 3 * 3 + 3 + 6) + 5 * (2 * 5 * 5 * 5 + 9 * 8) * 7 + 6) * 7 + 3 * (2 + (6 * 2 + 4 * 2 * 6) * 8) * 3 * 7
3 + 4 + (5 + 3 * (3 + 3 * 6) * 8 * 8 * 9) * 3
(4 + 8) + 7 + 6 * 2 * (8 * 7 * (7 + 7 * 3))
3 * ((7 + 8 + 8 * 7) * 5 * 3 + 8 * 2) * 5 + 2
9 + 2 * 6 * (5 + 8 * (8 * 4 * 7 + 6 + 3 * 8) + 7) + 4 * 3
2 + 6 * 4 * 6 * (3 + 5 * (2 + 4 + 9 * 8 + 6))
3 + (7 + 9 * (3 + 4 * 7 + 2 + 7 * 5)) * (9 + (2 + 9 * 8)) * (7 * 4 + 7 * 4 + (7 + 2 * 5 + 5 * 2))
(7 + 7 * 5 + (3 + 3 * 4)) + 2 + 4 + 8 + 3
2 * (9 + 7 + (6 * 2 + 9)) * (2 * 5 * 3 * 8 * 2 + (3 * 3 * 6))
8 * (8 + 8 + 7 * (7 + 3)) + 4
4 + 9 + 5 * 3
9 * (7 * 7 * (6 + 9 * 7 + 9 * 4) * 9) + 2
(2 * 4 + (8 * 8 * 5) + 4) + 3 + 3 * 3 + 2 + 8
5 + (4 + 7 + (3 * 9) * (5 + 6 * 5 + 4 + 5) * 9) + 6 * 3 * 2 + 7
7 + (7 * 9 * 7 + (8 * 4 + 7 + 7 + 2) * (4 + 5 + 7 + 6 + 6) + 9) * 5 + 5 + 2 + 3
((6 + 7 + 8 + 6 + 7) + 8 * 4 + 8 + 8) * (4 * 6) + 7 * 6";
#[derive(Debug)]
enum Operation {
    Add,
    Mult,
}

#[derive(Debug)]
enum Expression {
    Num(i64),
    Operation(Box<Expression>, Operation, Box<Expression>),
}

/// Evaluate an expression tree
/// 
/// The order of operations is implicit in the structure of the tree. 
fn evaluate_expression(expr: &Expression) -> i64 {
    match expr {
        Expression::Num(num) => *num,
        Expression::Operation(left_expr, op, right_expr) => match op {
            Operation::Add => evaluate_expression(left_expr) + evaluate_expression(right_expr),
            Operation::Mult => evaluate_expression(left_expr) * evaluate_expression(right_expr),
        },
    }
}

/// For an expression that has parentheses as the first and last character,
/// return true if you could remove the first and last parentheses without
/// changing the meaning of the expression
/// 
/// Just because the first + last characters are an open + close paren respectively
/// does not mean that removing them would result in a valid expression
/// 
/// For example: `(1 + 2) * (3 + 4)` could become the invalid expression `1 + 2) * (3 + 4`
fn parentheses_balanced_expression(expr: &str) -> bool {
    let mut paren_depth = 0;
    for (i, letter) in expr.chars().enumerate() {
        if letter == '(' {
            paren_depth += 1;
        } else if letter == ')' {
            paren_depth -= 1;
        }
        if paren_depth == 0 && i < expr.len() - 1 {
            return false;
        }
    }
    paren_depth == 0
}

/// Finds the index that is the boundary between the last token (number or paren group) 
/// 
/// Examples
/// ```
/// let boundary = index_of_last_number_or_paren("2 + 3 + 5")
/// assert_eq!(("2 + 3 +", " 5"), "2 + 3 + 5".split(boundary.unwrap()))
/// 
/// let boundary = index_of_last_number_or_paren("2 + (3 + 5)")
/// assert_eq!(("2 +", " (3 + 5)"), "2 + (3 + 5)".split(boundary.unwrap()))
/// ```
fn index_of_last_number_or_paren(expr: &str) -> Option<usize> {
    let mut paren_depth = 0;
    for (from_back, letter) in expr.chars().rev().enumerate() {
        let i = expr.len() - from_back - 1;
        if letter == ')' {
            paren_depth += 1;
        } else if letter == '(' {
            paren_depth -= 1;
        } else if paren_depth == 0 && (letter == '+' || letter == '*') {
            return Some(i + 1);
        }
    }
    None
}

/// Finds the index that is the boundary between the last token (number or paren group), while 
/// acknowledging the fact that addition has higher precedence over multiplication
/// 
/// Leaf nodes in the Expression tree get executed first
/// 
/// Examples
/// ```
/// let boundary = index_of_last_number_or_paren("2 * 3 + 5")
/// assert_eq!(("2 *", "3 + 5"), "2 + 3 + 5".split(boundary.unwrap()))
/// 
/// let boundary = index_of_last_number_or_paren("2 + (3 * 5)")
/// assert_eq!(("2 +", " (3 * 5)"), "2 + (3 * 5)".split(boundary.unwrap()))
/// 
/// let boundary = index_of_last_number_or_paren("2 + 3 + 5")
/// assert_eq!(("2 + 3 +", " 5"), "2 + 3 + 5".split(boundary.unwrap()))
/// 
/// let boundary = index_of_last_number_or_paren("2 + (3 + 5)")
/// assert_eq!(("2 +", " (3 + 5)"), "2 + (3 + 5)".split(boundary.unwrap()))
/// ```
fn index_of_last_number_or_paren_operator_precedence(expr: &str) -> Option<usize> {
    let mut paren_depth = 0;
    let mut maybe_ret: Option<usize> = None;
    for (from_back, letter) in expr.chars().rev().enumerate() {
        let i = expr.len() - from_back - 1;
        if letter == ')' {
            paren_depth += 1;
        } else if letter == '(' {
            paren_depth -= 1;
        } else if paren_depth == 0 {
            if letter == '*' {
                return Some(i + 1);
            } else if letter == '+' && maybe_ret == None {
                maybe_ret = Some(i+1);
            }
        }
    }
    maybe_ret
}

fn parse_expression(untrimmed_expr: &str, find_index_of_last_token: &dyn Fn(&str) -> Option<usize>) -> Expression {
    lazy_static! {
        static ref LEFT_HAND_FRAGMENT_REGEX: Regex = Regex::new(r"^(.+) ([\+\*])").unwrap();
        static ref OUTER_PARENS_REGEX: Regex = Regex::new(r"^\((.*)\)$").unwrap();
    }

    let expr = untrimmed_expr.trim();
    match expr.trim().parse::<i64>() {
        Ok(num) => Expression::Num(num),
        Err(_) => {
            let actual_expr: &str;
            if let Some(unwrap_parens) = OUTER_PARENS_REGEX.captures(expr) {
                if parentheses_balanced_expression(expr) {
                    actual_expr = unwrap_parens.get(1).unwrap().as_str();
                } else {
                    actual_expr = expr;
                }
            } else {
                actual_expr = expr;
            }
            let split_at = find_index_of_last_token(actual_expr);
            let (left, right_hand_expr_str) = actual_expr.split_at(split_at.unwrap());

            let expr_captures = LEFT_HAND_FRAGMENT_REGEX.captures(left).unwrap();
            let left_hand_expr_str = expr_captures.get(1).unwrap().as_str();
            let operator = expr_captures
                .get(2)
                .unwrap()
                .as_str()
                .chars()
                .next()
                .unwrap();
            let left_hand_expr = parse_expression(left_hand_expr_str, find_index_of_last_token);
            let right_hand_expr = parse_expression(right_hand_expr_str, find_index_of_last_token);

            Expression::Operation(
                Box::new(left_hand_expr),
                if operator == '+' {
                    Operation::Add
                } else if operator == '*' {
                    Operation::Mult
                } else {
                    panic!()
                },
                Box::new(right_hand_expr),
            )
        }
    }
}


pub fn day18_main() {
    // part 1
    let mut sum = 0;
    for expr_line in MATH_EQUATIONS.split("\n") {
        sum += evaluate_expression(&parse_expression(expr_line, &index_of_last_number_or_paren));
    }
    println!("sum of equation results, no precedence: {}", sum);

    // part 2
    let mut sum = 0;
    for expr_line in MATH_EQUATIONS.split("\n") {
        sum += evaluate_expression(&parse_expression(expr_line, &index_of_last_number_or_paren_operator_precedence));
    }
    println!("sum of equation results, + precedes *: {}", sum);
}
